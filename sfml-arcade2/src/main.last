#include <SFML/Graphics.hpp>
#include <vector>
#include <string>
#include <unordered_map>
#include <stdexcept>
#include <iostream>

// Structure to represent a frame with additional properties
struct Frame
{
    int row;
    int col;
    bool reverse;
    std::pair<bool, bool> size; // New property to indicate double width and double height
};

class Sprite
{
public:
    Sprite(const std::string& textureFile, const sf::Vector2i& frameSize, const std::string& executablePath)
        : frameSize(frameSize), currentFrame(0), animationSpeed(0.1f), isLooping(true), isPingPong(false), isForward(true)
    {
        // Get the directory of the executable
        std::string execDir = executablePath.substr(0, executablePath.find_last_of("/\\"));

        // Construct the full path to the texture file
        std::string textureFullPath = execDir + "/resources/" + textureFile;

        if (!texture.loadFromFile(textureFullPath))
        {
            // Handle loading error
            throw std::runtime_error("Failed to load texture: " + textureFullPath);
        }

        sprite.setTexture(texture);
    }

    void addAnimation(const std::string& name, const std::vector<Frame>& frames)
    {
        animations[name] = frames;
    }

    void setAnimation(const std::string& name, float speed = 0.1f, bool loop = true, bool pingPong = false)
    {
        if (animations.find(name) != animations.end())
        {
            currentAnimation = name;
            currentFrame = 0;
            animationSpeed = speed;
            isLooping = loop;
            isPingPong = pingPong;
            isForward = true;
            updateSpriteTextureRect();
        }
    }

    void update()
    {
        if (clock.getElapsedTime().asSeconds() > animationSpeed)
        {
            if (isForward)
            {
                currentFrame++;
                if (currentFrame >= animations[currentAnimation].size())
                {
                    if (isLooping)
                    {
                        currentFrame = 0;
                    }
                    else if (isPingPong)
                    {
                        currentFrame = animations[currentAnimation].size() - 2;
                        isForward = false;
                    }
                    else
                    {
                        currentFrame--;
                    }
                }
            }
            else
            {
                currentFrame--;
                if (currentFrame < 0)
                {
                    if (isLooping)
                    {
                        currentFrame = animations[currentAnimation].size() - 1;
                    }
                    else if (isPingPong)
                    {
                        currentFrame = 1;
                        isForward = true;
                    }
                    else
                    {
                        currentFrame++;
                    }
                }
            }

            updateSpriteTextureRect();
            clock.restart();
        }
    }

    void draw(sf::RenderWindow& window)
    {
        window.draw(sprite);
    }

    void setPosition(float x, float y)
    {
        sprite.setPosition(x, y);
    }

    void setSpeed(float speed)
    {
        animationSpeed = speed;
    }

    void setLooping(bool loop)
    {
        isLooping = loop;
    }

    void setPingPong(bool pingPong)
    {
        isPingPong = pingPong;
    }

protected:
    sf::Texture texture;
    sf::Sprite sprite;
    sf::Vector2i frameSize;
    int currentFrame;
    float animationSpeed;
    bool isLooping;
    bool isPingPong;
    bool isForward;
    sf::Clock clock;
    std::string currentAnimation;
    std::unordered_map<std::string, std::vector<Frame>> animations;

    void updateSpriteTextureRect()
    {
        const Frame& frame = animations[currentAnimation][currentFrame];
        int x = frame.col * frameSize.x;
        int y = frame.row * frameSize.y;
        int width = frame.size.first ? frameSize.x * 2 : frameSize.x;
        int height = frame.size.second ? frameSize.y * 2 : frameSize.y;
        if (frame.reverse)
        {
            x += width; // Adjust x position to start from the right edge
            width *= -1; // Reverse the width to flip horizontally
        }
        sprite.setTextureRect(sf::IntRect(x, y, width, height));
    }
};

// Example usage for Player, Enemy, and Coin classes:
class Player : public Sprite
{
public:
    Player(const std::string& textureFile, const sf::Vector2i& frameSize, const std::string& executablePath)
        : Sprite(textureFile, frameSize, executablePath)
    {

    addAnimation("ninja-right", {
        { 0, 0, false, { false, false } }
    });
    addAnimation("ninja-walk-right", {
        { 0, 1, false, { false, false } },
        { 0, 2, false, { false, false } },
        { 0, 3, false, { false, false } },
        { 0, 4, false, { false, false } },
        { 0, 5, false, { false, false } },
        { 0, 6, false, { false, false } },
        { 0, 7, false, { false, false } },
        { 0, 8, false, { false, false } },
        { 0, 9, false, { false, false } },
        { 0, 10, false, { false, false } },
        { 0, 11, false, { false, false } },
        { 0, 12, false, { false, false } },
        { 0, 13, false, { false, false } },
        { 0, 14, false, { false, false } },
        { 0, 15, false, { false, false } },
        { 0, 16, false, { false, false } },
        { 0, 17, false, { false, false } },
        { 0, 18, false, { false, false } },
        { 0, 19, false, { false, false } },
        { 0, 20, false, { false, false } },
    });
    addAnimation("ninja-left", {
        { 0, 21, false, { false, false } },
        { 0, 22, false, { false, false } },
        { 0, 23, false, { false, false } },
        { 0, 24, false, { false, false } },
        { 0, 25, false, { false, false } },
        { 0, 26, false, { false, false } },
        { 0, 27, false, { false, false } },
        { 0, 28, false, { false, false } },
        { 0, 29, false, { false, false } },
        { 0, 30, false, { false, false } },
        { 0, 31, false, { false, false } },
        { 0, 32, false, { false, false } },
        { 0, 33, false, { false, false } },
        { 0, 34, false, { false, false } },
        { 0, 35, false, { false, false } },
        { 0, 36, false, { false, false } },
        { 0, 37, false, { false, false } },
        { 0, 38, false, { false, false } },
        { 0, 39, false, { false, false } },
        { 0, 40, false, { false, false } },
        { 0, 41, false, { false, false } },
    });
    addAnimation("ninja-jump-left", {
        { 0, 42, false, { false, false } },
        { 0, 43, false, { false, false } },
        { 0, 44, false, { false, false } },
        { 0, 45, false, { false, false } },
        { 0, 46, false, { false, false } },
        { 0, 47, false, { false, false } },
        { 0, 48, false, { false, false } },
        { 0, 49, false, { false, false } },
        { 0, 50, false, { false, false } },
        { 0, 51, false, { false, false } },
        { 0, 52, false, { false, false } },
        { 0, 53, false, { false, false } },
        { 0, 54, false, { false, false } },
        { 0, 55, false, { false, false } },
        { 0, 56, false, { false, false } },
        { 0, 57, false, { false, false } },
        { 0, 58, false, { false, false } },
        { 0, 59, false, { false, false } },
    });
    addAnimation("ninja-jump-right", {
        { 0, 60, false, { false, false } },
        { 0, 61, false, { false, false } },
        { 0, 62, false, { false, false } },
        { 0, 63, false, { false, false } },
        { 0, 64, false, { false, false } },
        { 0, 65, false, { false, false } },
        { 0, 66, false, { false, false } },
        { 0, 67, false, { false, false } },
        { 0, 68, false, { false, false } },
        { 0, 69, false, { false, false } },
        { 0, 70, false, { false, false } },
        { 0, 71, false, { false, false } },
        { 0, 72, false, { false, false } },
        { 0, 73, false, { false, false } },
        { 0, 74, false, { false, false } },
        { 0, 75, false, { false, false } },
        { 0, 76, false, { false, false } },
        { 0, 77, false, { false, false } },
    });
    addAnimation("ninja-sword-right", {
        { 0, 78, false, { false, false } },
        { 0, 79, false, { false, false } },
        { 0, 80, false, { false, false } },
        { 0, 81, false, { false, false } },
        { 0, 82, false, { false, false } },
        { 0, 83, false, { false, false } },
        { 0, 84, false, { false, false } },
        { 0, 85, false, { false, false } },
        { 0, 86, false, { false, false } },
        { 0, 87, false, { false, false } },
        { 0, 88, false, { false, false } },
        { 0, 89, false, { false, false } },
        { 0, 90, false, { false, false } },
        { 0, 91, false, { false, false } },
        { 0, 92, false, { false, false } },
        { 0, 93, false, { false, false } },
        { 0, 94, false, { false, false } },
        { 0, 95, false, { false, false } },
        { 0, 96, false, { false, false } },
        { 0, 97, false, { false, false } },
        { 0, 98, false, { false, false } },
    });
    addAnimation("ninja-sword-left", {
        { 0, 99, false, { false, false } },
        { 0, 100, false, { false, false } },
        { 0, 101, false, { false, false } },
        { 0, 102, false, { false, false } },
        { 0, 103, false, { false, false } },
        { 0, 104, false, { false, false } },
        { 0, 105, false, { false, false } },
        { 0, 106, false, { false, false } },
        { 0, 107, false, { false, false } },
        { 0, 108, false, { false, false } },
        { 0, 109, false, { false, false } },
        { 0, 110, false, { false, false } },
        { 0, 111, false, { false, false } },
        { 0, 112, false, { false, false } },
        { 0, 113, false, { false, false } },
        { 0, 114, false, { false, false } },
        { 0, 115, false, { false, false } },
        { 0, 116, false, { false, false } },
        { 0, 117, false, { false, false } },
        { 0, 118, false, { false, false } },
        { 0, 119, false, { false, false } },
    });
    addAnimation("ninja-explode", {
        { 0, 120, false, { false, false } },
        { 0, 121, false, { false, false } },
        { 0, 122, false, { false, false } },
        { 0, 123, false, { false, false } },
        { 0, 124, false, { false, false } },
        { 0, 125, false, { false, false } },
        { 0, 126, false, { false, false } },
        { 0, 127, false, { false, false } },
        { 0, 128, false, { false, false } },
        { 0, 129, false, { false, false } },
        { 0, 130, false, { false, false } },
    });
    addAnimation("enemy-bandit-right", {
        { 0, 131, false, { false, false } },
        { 0, 132, false, { false, false } },
        { 0, 133, false, { false, false } },
        { 0, 134, false, { false, false } },
        { 0, 135, false, { false, false } },
        { 0, 136, false, { false, false } },
        { 0, 137, false, { false, false } },
        { 0, 138, false, { false, false } },
        { 0, 139, false, { false, false } },
        { 0, 140, false, { false, false } },
        { 0, 141, false, { false, false } },
    });
    addAnimation("enemy-bandit-left", {
        { 0, 142, false, { false, false } },
        { 0, 143, false, { false, false } },
        { 0, 144, false, { false, false } },
        { 0, 145, false, { false, false } },
        { 0, 146, false, { false, false } },
        { 0, 147, false, { false, false } },
        { 0, 148, false, { false, false } },
        { 0, 149, false, { false, false } },
        { 0, 150, false, { false, false } },
        { 0, 151, false, { false, false } },
        { 0, 152, false, { false, false } },
    });
    addAnimation("enemy-orc-right", {
        { 0, 153, false, { false, false } },
        { 0, 154, false, { false, false } },
        { 0, 155, false, { false, false } },
        { 0, 156, false, { false, false } },
        { 0, 157, false, { false, false } },
        { 0, 158, false, { false, false } },
        { 0, 159, false, { false, false } },
        { 0, 160, false, { false, false } },
        { 0, 161, false, { false, false } },
        { 0, 162, false, { false, false } },
        { 0, 163, false, { false, false } },
    });
    addAnimation("enemy-orc-left", {
        { 0, 164, false, { false, false } },
        { 0, 165, false, { false, false } },
        { 0, 166, false, { false, false } },
        { 0, 167, false, { false, false } },
        { 0, 168, false, { false, false } },
        { 0, 169, false, { false, false } },
        { 0, 170, false, { false, false } },
        { 0, 171, false, { false, false } },
        { 0, 172, false, { false, false } },
        { 0, 173, false, { false, false } },
        { 0, 174, false, { false, false } },
    });
    addAnimation("enemy-scorpion-right", {
        { 0, 175, false, { false, false } },
        { 0, 176, false, { false, false } },
        { 0, 177, false, { false, false } },
        { 0, 178, false, { false, false } },
        { 0, 179, false, { false, false } },
        { 0, 180, false, { false, false } },
        { 0, 181, false, { false, false } },
        { 0, 182, false, { false, false } },
        { 0, 183, false, { false, false } },
        { 0, 184, false, { false, false } },
        { 0, 185, false, { false, false } },
    });
    addAnimation("enemy-scorpion-left", {
        { 0, 186, false, { false, false } },
        { 0, 187, false, { false, false } },
        { 0, 188, false, { false, false } },
        { 0, 189, false, { false, false } },
        { 0, 190, false, { false, false } },
        { 0, 191, false, { false, false } },
        { 0, 192, false, { false, false } },
        { 0, 193, false, { false, false } },
        { 0, 194, false, { false, false } },
        { 0, 195, false, { false, false } },
        { 0, 196, false, { false, false } },
    });
    addAnimation("enemy-explode", {
        { 0, 197, false, { false, false } },
        { 0, 198, false, { false, false } },
        { 0, 199, false, { false, false } },
        { 0, 200, false, { false, false } },
        { 0, 201, false, { false, false } },
        { 0, 202, false, { false, false } },
        { 0, 203, false, { false, false } },
        { 0, 204, false, { false, false } },
        { 0, 205, false, { false, false } },
        { 0, 206, false, { false, false } },
        { 0, 207, false, { false, false } },
    });
    addAnimation("quest-fisher-right", {
        { 0, 208, false, { false, false } },
        { 0, 209, false, { false, false } },
        { 0, 210, false, { false, false } },
        { 0, 211, false, { false, false } },
        { 0, 212, false, { false, false } },
        { 0, 213, false, { false, false } },
        { 0, 214, false, { false, false } },
        { 0, 215, false, { false, false } },
        { 0, 216, false, { false, false } },
        { 0, 217, false, { false, false } },
        { 0, 218, false, { false, false } },
    });
    addAnimation("quest-fisher-left", {
        { 0, 219, false, { false, false } },
        { 0, 220, false, { false, false } },
        { 0, 221, false, { false, false } },
        { 0, 222, false, { false, false } },
        { 0, 223, false, { false, false } },
        { 0, 224, false, { false, false } },
        { 0, 225, false, { false, false } },
        { 0, 226, false, { false, false } },
        { 0, 227, false, { false, false } },
        { 0, 228, false, { false, false } },
        { 0, 229, false, { false, false } },
    });
    addAnimation("quest-charles-right", {
        { 0, 230, false, { true, false } },
        { 0, 231, false, { true, false } },
        { 0, 232, false, { true, false } },
        { 0, 233, false, { true, false } },
        { 0, 234, false, { true, false } },
        { 0, 235, false, { true, false } },
        { 0, 236, false, { true, false } },
        { 0, 237, false, { true, false } },
    });
    addAnimation("quest-charles-left", {
        { 0, 238, false, { true, false } },
        { 0, 239, false, { true, false } },
        { 0, 240, false, { true, false } },
        { 0, 241, false, { true, false } },
        { 0, 242, false, { true, false } },
        { 0, 243, false, { true, false } },
        { 0, 244, false, { true, false } },
        { 0, 245, false, { true, false } },
    });
    addAnimation("star", {
        { 0, 246, false, { false, false } },
        { 0, 247, false, { false, false } },
        { 0, 248, false, { false, false } },
        { 0, 249, false, { false, false } },
        { 0, 250, false, { false, false } },
        { 0, 251, false, { false, false } },
        { 0, 252, false, { false, false } },
    });
    addAnimation("star-explode", {
        { 0, 253, false, { false, false } },
        { 0, 254, false, { false, false } },
        { 0, 255, false, { false, false } },
        { 0, 256, false, { false, false } },
        { 0, 257, false, { false, false } },
        { 0, 258, false, { false, false } },
        { 0, 259, false, { false, false } },
        { 0, 260, false, { false, false } },
        { 0, 261, false, { false, false } },
        { 0, 262, false, { false, false } },
        { 0, 263, false, { false, false } },
    });
    addAnimation("spike", {
        { 0, 264, false, { false, false } },
    });
    addAnimation("item-pickaxe", {
        { 0, 265, false, { false, false } },
    });
    addAnimation("item-sword", {
        { 0, 266, false, { false, false } },
    });
    addAnimation("blocker-cave", {
        { 0, 267, false, { true, false } },
        { 0, 268, false, { true, false } },
        { 0, 269, false, { true, false } },
        { 0, 270, false, { true, false } },
        { 0, 271, false, { true, false } },
        { 0, 272, false, { true, false } },
        { 0, 273, false, { true, false } },
    });
    addAnimation("exit-cave", {
        { 0, 274, false, { true, false } },
    });
    addAnimation("exit-house", {
        { 0, 275, false, { true, false } },
    });
    addAnimation("exit-house-white", {
        { 0, 276, false, { true, false } },
    });
    addAnimation("exit-portal-blue", {
        { 0, 277, false, { false, false } },
        { 0, 278, false, { false, false } },
        { 0, 279, false, { false, false } },
        { 0, 280, false, { false, false } },
        { 0, 281, false, { false, false } },
        { 0, 282, false, { false, false } },
        { 0, 283, false, { false, false } },
    });
    addAnimation("ground-left", {
        { 0, 284, false, { false, false } },
        { 0, 285, false, { false, false } },
        { 0, 286, false, { false, false } },
    });
    addAnimation("ground-center", {
        { 0, 287, false, { false, false } },
        { 0, 288, false, { false, false } },
        { 0, 289, false, { false, false } },
    });
    addAnimation("ground-right", {
        { 0, 290, false, { false, false } },
        { 0, 291, false, { false, false } },
        { 0, 292, false, { false, false } },
    });
    addAnimation("platform-left", {
        { 0, 293, false, { false, false } },
        { 0, 294, false, { false, false } },
        { 0, 295, false, { false, false } },
        { 0, 296, false, { false, false } },
        { 0, 297, false, { false, false } },
        { 0, 298, false, { false, false } },
    });
    addAnimation("platform-center", {
        { 0, 299, false, { false, false } },
        { 0, 300, false, { false, false } },
        { 0, 301, false, { false, false } },
        { 0, 302, false, { false, false } },
        { 0, 303, false, { false, false } },
        { 0, 304, false, { false, false } },
    });
    addAnimation("platform-right", {
        { 0, 305, false, { false, false } },
        { 0, 306, false, { false, false } },
        { 0, 307, false, { false, false } },
        { 0, 308, false, { false, false } },
        { 0, 309, false, { false, false } },
        { 0, 310, false, { false, false } },
    });
    addAnimation("cloud", {
        { 0, 311, false, { true, false } },
        { 0, 312, false, { true, false } },
        { 0, 313, false, { true, false } },
        { 0, 314, false, { true, false } },
        { 0, 315, false, { true, false } },
    });

        // Set default animation
        setAnimation("star", 0.04f);
    }
};

// class Enemy : public Sprite
// {
// public:
//     Enemy(const std::string& textureFile, const sf::Vector2i& frameSize, const std::string& executablePath)
//         : Sprite(textureFile, frameSize, executablePath)
//     {
//         // Define animations
//         addAnimation("fly", {
//             { 0, 0, false, {false, false} },
//             { 0, 1, false, {false, false} },
//             { 0, 2, false, {false, false} }
//         });

//         // Set default animation
//         setAnimation("fly");
//     }
// };

// class Coin : public Sprite
// {
// public:
//     Coin(const std::string& textureFile, const sf::Vector2i& frameSize, const std::string& executablePath)
//         : Sprite(textureFile, frameSize, executablePath)
//     {
//         // Define animations
//         addAnimation("spin", {
//             { 0, 0, false, {false, false} },
//             { 0, 1, false, {false, false} },
//             { 0, 2, false, {false, false} },
//             { 0, 3, false, {false, false} }
//         });

//         // Set default animation
//         setAnimation("spin");
//     }
// };

int main(int argc, char* argv[])
{
    if (argc < 1)
    {
        std::cerr << "Error: Unable to get the executable path." << std::endl;
        return 1;
    }

    sf::RenderWindow window(sf::VideoMode(800, 600), "River Raid");

    // Create player, enemy, and coin objects with executable path
    Player player("images/sprites.png", sf::Vector2i(92, 104), argv[0]);
    // Enemy enemy("enemy_sprites.png", sf::Vector2i(40, 40), argv[0]);
    // Coin coin("coin_sprites.png", sf::Vector2i(40, 40), argv[0]);

    // Set initial positions
    player.setPosition(100, 100);
    // enemy.setPosition(300, 100);
    // coin.setPosition(500, 100);

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // Update animations
        player.update();
        // enemy.update();
        // coin.update();

        // Clear window
        window.clear();

        // Draw sprites
        player.draw(window);
        // enemy.draw(window);
        // coin.draw(window);

        // Display the window
        window.display();
    }

    return 0;
}
